using System.Threading.Tasks;
using Microsoft.ServiceBus;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Web;
using Microsoft.ServiceBus.Messaging;

namespace AzureServiceBus.Services
{
    public abstract class BaseAsbService: IAsbService
    {
        private bool initialized;

        protected const string nsName = "<service-bus-name>"; // fill your service bus name

        // namespace shared access key
        protected const string nsKeyName = "RootManageSharedAccessKey";
        protected const string nsKey = "<namespace-access-key>"; // generated by Azure, when creating namespace

        protected TopicClient _tc;
        protected SubscriptionClient _sc;

        protected readonly IClientFactory _cf;

        private readonly IConnectionStringProvider _csp;

        public BaseAsbService(IClientFactory cf, IConnectionStringProvider csp)
        {
            if (cf == null)
                throw new ArgumentNullException("cf");
            if (csp == null)
                throw new ArgumentNullException("csp");

            _cf = cf;
            _csp = csp;
        }

        protected void SubscriberTask<T>()
        {
            while (true)
            {
                BrokeredMessage message = _sc.Receive();

                if (message != null)
                {
                    T msg = message.GetBody<T>();
                    Console.WriteLine(msg);

                    message.Complete();
                }
            }

        }

        protected abstract void CreateTopic(NamespaceManager nsm);

        private void CreateTopicAndSubscriber()
        {
            NamespaceManager nsm = NamespaceManager.CreateFromConnectionString(_csp.GetConnectionString(nsName, nsKeyName, nsKey));

            CreateTopic(nsm);
            initialized = true;

            Task.Run(() => SubscriberTask<string>());
        }

        public void SendMessage(string message)
        {
            if (!initialized)
                CreateTopicAndSubscriber();

            BrokeredMessage bm = new BrokeredMessage(message);
            bm.MessageId = Guid.NewGuid().ToString();
            _tc.Send(bm);
        }

        public string ReceiveMessage()
        {
            BrokeredMessage message = _sc.Receive();

            if (message != null)
            {
                string msg = message.GetBody<string>();
                return msg;
            }

            return null;
        }
    }
}